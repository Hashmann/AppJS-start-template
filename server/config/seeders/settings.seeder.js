import { Logger } from '../../utils/logger.utils.js'
import { permissionsIds } from './permissions.seeder.js'
import { rolesIds } from './role.seeder.js'
import SettingsModel from '../../models/settings/Settings.js'
import SettingsRouteModel from '../../models/settings/SettingsRoute.js'

// Remove Settings collection
export async function clearSettingsTable() {
	try {
		await SettingsModel.collection.drop()
		Logger.info('Settings table cleared','SEEDER','Settings','DONE','v')
	} catch (err) {
		Logger.error('Settings table clear','SEEDER','Settings',err,'ERROR')
	}
}

// Remove SettingsRoute collection
export async function clearSettingsRouteTable() {
	try {
		await SettingsRouteModel.collection.drop()
		Logger.info('SettingsRoute table cleared','SEEDER','Settings','DONE','v')
	} catch (err) {
		Logger.error('SettingsRoute table clear','SEEDER','Settings',err,'ERROR')
	}
}

// App all routes
export const appRoutes = {}

// App Routes
export async function routesSeeder () {
	try {
		const routes = {
			// userController
			1: {
				routeUrl: '/api/user/register',
				description: 'Registration user',
				params: null,
				method: 'POST',
				controller: 'userController.register',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			2: {
				routeUrl: '/api/user/login',
				description: 'Login user',
				params: null,
				method: 'POST',
				controller: 'userController.login',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			3: {
				routeUrl: '/api/user/logout',
				description: 'Logout user',
				params: null,
				method: 'POST',
				controller: 'userController.logout',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: false,
			},
			4: {
				routeUrl: '/api/user/:id',
				description: 'Update user by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.update',
				accessPermList: ['can-all', 'can-all-user', 'user-update', 'admin-panel', 'super-admin-panel'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: false,
			},
			5: {
				routeUrl: '/api/user/all',
				description: 'Get all users',
				params: null,
				method: 'GET',
				controller: 'userController.getAllUsers',
				accessPermList: ['can-all', 'super-admin-panel', 'admin-panel', 'users-read'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: false,
			},
			6: {
				routeUrl: '/api/user/:id',
				description: 'Get user by ID',
				params: ':id',
				method: 'GET',
				controller: 'userController.getUser',
				accessPermList: ['can-all', 'super-admin-panel', 'admin-panel', 'user-read'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: false,
			},
			7: {
				routeUrl: '/api/user/activate/:link',
				description: 'Activate user',
				params: ':link',
				method: 'GET',
				controller: 'userController.activate',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			8: {
				routeUrl: '/api/user/refresh',
				description: 'Refresh user token',
				params: null,
				method: 'GET',
				controller: 'userController.refresh',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: false,
			},
			9: {
				routeUrl: '/api/user/remove/:id',
				description: 'Delete user by ID',
				params: ':id',
				method: 'DELETE',
				controller: 'userController.remove',
				accessPermList: ['can-all', 'can-all-user', 'user-delete'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			10: {
				routeUrl: '/api/user/:id/like',
				description: 'Like the user by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.likeUser',
				accessPermList: ['can-all', 'can-all-user', 'user-delete'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			11: {
				routeUrl: '/api/user/:id/unlike',
				description: 'Unlike the user by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.unlikeUser',
				accessPermList: ['can-all', 'can-all-user', 'user-delete'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			12: {
				routeUrl: '/api/user/:id/dislike',
				description: 'Dislike the user by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.dislikeUser',
				accessPermList: ['can-all', 'can-all-user', 'user-delete'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			13: {
				routeUrl: '/api/user/:id/undislike',
				description: 'Undislike the user by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.undislikeUser',
				accessPermList: ['can-all', 'can-all-user', 'user-delete'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			14: {
				routeUrl: '/api/user/data/:id',
				description: 'Update user data by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.updateUserData',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN', 'USER'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			15: {
				routeUrl: '/api/user/data/:id',
				description: 'Get user data by ID',
				params: ':id',
				method: 'GET',
				controller: 'userController.getUserData',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN', 'USER'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			16: {
				routeUrl: '/api/user/stats/:id',
				description: 'Get user stats by ID',
				params: ':id',
				method: 'GET',
				controller: 'userController.getUserStats',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN', 'USER'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			17: {
				routeUrl: '/api/user/ban/:id',
				description: 'Issue a ban to the user by ID',
				params: ':id',
				method: 'POST',
				controller: 'userController.issueBan',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			18: {
				routeUrl: '/api/user/ban/:id',
				description: 'Get user ban data by ID',
				params: ':id',
				method: 'GET',
				controller: 'userController.getUserBan',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			19: {
				routeUrl: '/api/user/bans/:id',
				description: 'Get user bans data by ID',
				params: ':id',
				method: 'GET',
				controller: 'userController.getUserBans',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			20: {
				routeUrl: '/api/user/ban/:id',
				description: 'Update user ban data by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'userController.updateUserBan',
				accessPermList: ['can-all', 'can-all-user'],
				accessRoleList: ['SUPER-ADMIN', 'ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			// permissionController
			21: {
				routeUrl: '/api/permission',
				description: 'Get all permissions',
				params: null,
				method: 'GET',
				controller: 'permissionController.getAllPermissions',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			22: {
				routeUrl: '/api/permission/:id',
				description: 'Get permission by ID',
				params: ':id',
				method: 'GET',
				controller: 'permissionController.getPermission',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			// roleController
			23: {
				routeUrl: '/api/role/create',
				description: 'Create role',
				params: null,
				method: 'POST',
				controller: 'roleController.create',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			24: {
				routeUrl: '/api/role/update/:id',
				description: 'Update role by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'roleController.update',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			25: {
				routeUrl: '/api/role/remove/:id',
				description: 'Delete role by ID',
				params: ':id',
				method: 'DELETE',
				controller: 'roleController.remove',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			26: {
				routeUrl: '/api/role',
				description: 'Get all roles',
				params: null,
				method: 'GET',
				controller: 'roleController.getAllRoles',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			27: {
				routeUrl: '/api/role/:id',
				description: 'Get role by ID',
				params: ':id',
				method: 'GET',
				controller: 'roleController.getRole',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			// categoryController
			28: {
				routeUrl: '/api/category/create',
				description: 'Create a new category',
				params: null,
				method: 'POST',
				controller: 'categoryController.create',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			29: {
				routeUrl: '/api/category/update/:id',
				description: 'Update category by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'categoryController.update',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			30: {
				routeUrl: '/api/category/remove/:id',
				description: 'Delete category by ID',
				params: ':id',
				method: 'DELETE',
				controller: 'categoryController.remove',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			31: {
				routeUrl: '/api/category/:id',
				description: 'Get category by ID',
				params: ':id',
				method: 'GET',
				controller: 'categoryController.getCategory',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			32: {
				routeUrl: '/api/category',
				description: 'Get all categories',
				params: null,
				method: 'GET',
				controller: 'categoryController.getAllCategories',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			// tagController
			33: {
				routeUrl: '/api/tag/create',
				description: 'Create a new tag',
				params: null,
				method: 'POST',
				controller: 'tagController.create',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			34: {
				routeUrl: '/api/tag/update/:id',
				description: 'Update tag by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'tagController.update',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			35: {
				routeUrl: '/api/tag/remove/:id',
				description: 'Delete tag by ID',
				params: ':id',
				method: 'DELETE',
				controller: 'tagController.remove',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			36: {
				routeUrl: '/api/tag/:id',
				description: 'Get tag by ID',
				params: ':id',
				method: 'GET',
				controller: 'tagController.getTag',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			37: {
				routeUrl: '/api/tag',
				description: 'Get all tags',
				params: null,
				method: 'GET',
				controller: 'tagController.getAllTag',
				accessPermList: ['can-all'],
				accessRoleList: ['SUPER_ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			// postController
			38: {
				routeUrl: '/api/post/tags',
				description: 'Get all posts with tags',
				params: null,
				method: 'GET',
				controller: 'postController.getPostsWithTags',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			39: {
				routeUrl: '/api/post/:id',
				description: 'Get post by ID',
				params: ':id',
				method: 'GET',
				controller: 'postController.getPost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			40: {
				routeUrl: '/api/post',
				description: 'Get post by ID',
				params: null,
				method: 'GET',
				controller: 'postController.getAllPosts',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			41: {
				routeUrl: '/api/post/category/:slug',
				description: 'Get posts from category by slug',
				params: ':slug',
				method: 'GET',
				controller: 'postController.getPostFromCategory',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			42: {
				routeUrl: '/api/post/tag/:slug',
				description: 'Get posts with tag by slug',
				params: ':slug',
				method: 'GET',
				controller: 'postController.getPostsWithTag',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			43: {
				routeUrl: '/api/post/author/:id',
				description: 'Get posts author by ID',
				params: ':id',
				method: 'GET',
				controller: 'postController.getPostByAuthor',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			44: {
				routeUrl: '/api/post/category/:slug/tags',
				description: 'Get posts from category with tags',
				params: ':slug',
				method: 'GET',
				controller: 'postController.getPostFromCategoryWithTags',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			45: {
				routeUrl: '/api/post/:id/like',
				description: 'Like the post by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.likePost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: true,
			},
			46: {
				routeUrl: '/api/post/:id/unlike',
				description: 'Unlike the post by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.unlikePost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: true,
			},
			47: {
				routeUrl: '/api/post/:id/dislike',
				description: 'Dislike the post by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.dislikePost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: true,
			},
			48: {
				routeUrl: '/api/post/:id/undislike',
				description: 'Undislike the post by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.undislikePost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: true,
			},
			49: {
				routeUrl: '/api/post/:id/wishlist',
				description: 'Add the post in wishlist by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.wishlistPost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: true,
			},
			50: {
				routeUrl: '/api/post/:id/unwishlist',
				description: 'Remove the post from the wish list by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.unwishlistPost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: true,
				isCheckBan: true,
			},
			51: {
				routeUrl: '/api/post/create',
				description: 'Create the new post',
				params: null,
				method: 'POST',
				controller: 'postController.create',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			52: {
				routeUrl: '/api/post/update/:id',
				description: 'Update the post by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'postController.update',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			53: {
				routeUrl: '/api/post/remove/:id',
				description: 'Delete the post by ID',
				params: ':id',
				method: 'DELETE',
				controller: 'postController.remove',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			54: {
				routeUrl: '/api/post',
				description: 'Get all posts',
				params: null,
				method: 'GET',
				controller: 'postController.getAllPosts',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			55: {
				routeUrl: '/api/post/:slug',
				description: 'Get post by ID',
				params: ':slug',
				method: 'GET',
				controller: 'postController.getPost',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			56: {
				routeUrl: '/api/post/:id/comment',
				description: 'Create comment for post by ID',
				params: ':id',
				method: 'POST',
				controller: 'postController.createComment',
				accessPermList: [],
				accessRoleList: ['USER', 'MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			57: {
				routeUrl: '/api/post/:id/comments',
				description: 'Get all comment for post by ID',
				params: ':id',
				method: 'GET',
				controller: 'postController.getPostComments',
				accessPermList: [],
				accessRoleList: [],
				isCheckAuth: false,
				isCheckBan: false,
			},
			// commentController
			58: {
				routeUrl: '/api/comment/:id',
				description: 'Update comment by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'commentController.update',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			59: {
				routeUrl: '/api/comment/remove/:id',
				description: 'Delete comment by ID',
				params: ':id',
				method: 'DELETE',
				controller: 'commentController.remove',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			60: {
				routeUrl: '/api/comment/all',
				description: 'Get all comments',
				params: null,
				method: 'GET',
				controller: 'commentController.getAllComments',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			61: {
				routeUrl: '/api/comment/:id',
				description: 'Get comment by ID',
				params: ':id',
				method: 'GET',
				controller: 'commentController.getComment',
				accessPermList: [],
				accessRoleList: ['MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			62: {
				routeUrl: '/api/comment/:id/like',
				description: 'Like a comment by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'commentController.likeComment',
				accessPermList: [],
				accessRoleList: ['USER', 'MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			63: {
				routeUrl: '/api/comment/:id/unlike',
				description: 'Unlike a comment by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'commentController.unlikeComment',
				accessPermList: [],
				accessRoleList: ['USER', 'MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			64: {
				routeUrl: '/api/comment/:id/dislike',
				description: 'Dislike a comment by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'commentController.dislikeComment',
				accessPermList: [],
				accessRoleList: ['USER', 'MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			65: {
				routeUrl: '/api/comment/:id/undislike',
				description: 'Undislike a comment by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'commentController.undislikeComment',
				accessPermList: [],
				accessRoleList: ['USER', 'MANAGER', 'ADMIN', 'SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			// settingsController
			66: {
				routeUrl: '/api/settings/route/:id',
				description: 'Update app route by ID',
				params: ':id',
				method: 'PATCH',
				controller: 'settingsController.updateRoute',
				accessPermList: [],
				accessRoleList: ['SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			67: {
				routeUrl: '/api/settings/update',
				description: 'Update app settings',
				params: null,
				method: 'PATCH',
				controller: 'settingsController.updateSettings',
				accessPermList: [],
				accessRoleList: ['SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			68: {
				routeUrl: '/api/settings/route/:id',
				description: 'Get app route by ID',
				params: ':id',
				method: 'GET',
				controller: 'settingsController.getRoute',
				accessPermList: [],
				accessRoleList: ['SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			69: {
				routeUrl: '/api/settings/route/all',
				description: 'Get all app routes',
				params: null,
				method: 'GET',
				controller: 'settingsController.getRoutes',
				accessPermList: [],
				accessRoleList: ['SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
			70: {
				routeUrl: '/api/settings',
				description: 'Get all settings',
				params: null,
				method: 'GET',
				controller: 'settingsController.getSettings',
				accessPermList: [],
				accessRoleList: ['SUPER-ADMIN'],
				isCheckAuth: true,
				isCheckBan: true,
			},
		}
		// Add routes in database
		for (let route in routes) {
			// Add Permissions ids
			const routePermissions = []
			for (let permission in permissionsIds) {
				if (routes[route].accessPermList.includes(permission)) {
					routePermissions.push(permissionsIds[permission])
				}
			}
			// Add Roles ids
			const routeRoles = []
			for (let role in rolesIds) {
				if (routes[route].accessRoleList.includes(role)) {
					routeRoles.push(rolesIds[role])
				}
			}
			const appRoute = await SettingsRouteModel.create({
				routeUrl: routes[route].routeUrl,
				description: routes[route].description,
				params: routes[route].params,
				method: routes[route].method,
				controller: routes[route].controller,
				accessPermList: routePermissions,
				accessRoleList: routeRoles,
				isCheckAuth: routes[route].isCheckAuth,
				isCheckBan: routes[route].isCheckBan,
			})
			appRoutes[appRoute._id] = appRoute
		}
		Logger.info('Routes created','SEEDER','Settings','DONE','v')
	} catch (err) {
		Logger.error('Routes create','SEEDER','Settings',err,'ERROR')
	}
}

// Settings
export async function settingsSeeder () {
	try {
		const settings = {
			info: {
				title: 'Settings',
				appName: 'App template',
				description: 'App template description',
				version: '1.0'
			},
			settings: {
				settingOne: 'setting parameter',
				settingTwo: 'setting parameter'
			}
		}
		// All routes ids
		const appRoutesIds = []
		for (let route in appRoutes) {
			if (!appRoutesIds.includes(appRoutes[route]._id)) {
				appRoutesIds.push(appRoutes[route]._id)
			}
		}
		// Add settings in database
		const appSettings = await SettingsModel.create({
			info: settings.info,
			routes: appRoutesIds,
			settings: settings.settings
		})
		Logger.info('Settings created','SEEDER','Settings','DONE','v')
	} catch (err) {
		Logger.error('Settings create','SEEDER','Settings',err,'ERROR')
	}
}